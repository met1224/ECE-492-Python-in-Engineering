#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue May 21 17:28:36 2019
Modified on Wed May 31 13:46:00 2023

This Program Contains Multiple Functions as Specified by the Homework 2 Instructions. There is a List Generator That Generates a Random List, and Then Each of the
Functions in this File Set, Sort, and Perform Specific Operations Like Inserting a New Line Character Every 200 Lines. The Modified List Converted to a Dictionary 
and is then Written to a Text File.

@author: Rags, Byron K. Nelson
"""

# Import Libraries
import os
import csv
import random
import string

def SortCategoryEx1(random_list: list):
    """ 
    Sorts the Items in the List in 4 Different Sets:  Color, Name, Fruit, Number
    
    - Input: A Random List Like the One Generated by CreateRandomListFile()
    - Output: A Sorted List According to Category Sets
    
    """
    
    color = set()  # Converting to Set Will Take Out Duplicate Elements
    name = set()
    fruit = set()
    number = set()
    
    for i in random_list:
        if i[0] == "color":
            color.add(i[1])
        elif i[0] == "name":
            name.add(i[1])
        elif i[0] == "fruit":
            fruit.add(i[1])
        elif i[0] == "number":
            number.add(i[1])
            
    # print("This Is a Color")    
    print('Color Set as {} Elements: {} \nName Set Has {} Elements: {}\n Fruit Set Has {} Elements: {}\n Number Set Has {} Elements: {}'.format(
        len(color), color, len(name), name, len(fruit), fruit, len(number), number))
    
def CreateRandomListFile(howlong:int = 1000):
    """
    Creates a Random List of Stuff and Writes it to a File
    
    - Input: How Many Lines of Random Stuff You Want the List to Be
    - Output: The Random List
    
    """

    random_list = []
    names = ['Steve', 'Bob', 'David', 'Rachana', 'Zach', 'Mike', 'Josh', 'Scott', 'Jenn', 'Cathy', 'Sharon', 'Zack', 'Carol']
    colors = ["red", "blue", "orange", "yellow", "green", "light blue", "white", "black", "pink", "purple", "cyan", "magenta", "indigo", "olive"]
    fruits = ["orange","olive","strawberry","apricot","watermelon","banana","grapes","avocado","blueberries","blackberries","cherries","cranberries","figs","guava","grapefruit","lemon"]
    numbers = ["5", "26", "19", "85", "18", "20", "78", "64", "33", "1", "35", "52", "4", "75", "94", "77", "38", "34", "87", "55"]
    
    with open("randomfilelist.txt", 'w') as f:
        for i in range(howlong):
            category = random.randint(1,4)
            
            if category == 1:
                index_names = random.randint(0,(len(names)-1))
                f.write("name," + names[index_names] + "\n")       
            elif category == 2:
                index_colors = random.randint(0,(len(colors)-1))
                f.write("color,"+colors[index_colors]+"\n")
            elif category == 3:
                index_fruits = random.randint(0,(len(fruits)-1))
                f.write("fruit,"+fruits[index_fruits]+"\n")
            elif category == 4:
                index_numbers = random.randint(0,(len(numbers)-1))
                f.write("number," + numbers[index_numbers]+ "\n")

def SortasDict(random_list: list):
    """  
    Converts the Category Data into Dictionary Object, However the Problem is if There are Multiple Entries with the Same Name and Different Category 
    Such as name Olive, color Olive and fruit Olive,  While Creating the Dictionary Object it Will Overwrite the Previous Entry and Keep Only the 
    Latest Olive Key with the Latest Found Category Unless One is Capital and Another One is Not
    
    - Input: A Random List Like the One Generated by CreateRandomListFile()
    - Output: A Dictionary Version of the Imported List
         
    """
    
    D = {}
    
    for i in random_list:
        if i[1] not in D:
            D[i[1]] = [i[0]]
        else:
            D[i[1]].append(i[0])
    
    print(D)
    
# Number 1
def gen_code_file(secretword:str,freq:int,maxlength:int):
    """
    Generate a Code Word File With a Secretword Embedded Randomly Into a File of Random Characters at a Random Location
    
    - Inputs: The Secret Word to Be Added, How Many Times To Place It, The Maximum Length of the Characters
    - Output: A New File, if It Doesn't Exist, With the Date Concatenated After the Keyword Occurence
    
    """
    
    import datetime
    from datetime import date
    # datetime.date.today()
    # datetime.datetime.now().time()

    max_letters = min(maxlength, 100000)
    file_contents = ""
    
    if freq > max_letters // (len(secretword) * 3):
        print("Frequency is Too High for the Specified Word to Be Written in the File")
        return -1
    
    for i in range(max_letters):
        if i % 200 == 0:
            file_contents += "\n"
        if freq > 0 and i % (max_letters // freq) == 0:
            today = str(date.today())
            file_contents += secretword + today + " "
        else:
            file_contents += random.choice(string.ascii_letters)
            
    file_path = "random_letters_new.txt"

    if os.path.isfile(file_path):
        print("File '{}' Already Exists. Please Choose a Different File Name.".format(file_path))
        return -1
    
    with open(file_path, "w") as file:
        file.write(file_contents)
    
# Testing the Modified Functions
#random_list = [("color", "red"), ("name", "Bob"), ("fruit", "banana"), ("number", "5"), ("color", "blue"), ("name", "Steve")]
#SortCategoryEx1(random_list)

#CreateRandomListFile(howlong = 1000)

#random_list = [("color", "red"), ("name", "Bob"), ("fruit", "banana"), ("number", "5"), ("color", "blue"), ("name", "Steve")]
#SortasDict(random_list)

#gen_code_file("secretword", freq = 2, maxlength = 500)

# Number 2
def findWord(filename, word):
    """
    Searches the File Contents for the Word and Returns the Locations Where the Word Appears
    
    - Inputs: The Name of the File to Be Searched, The Word to Be Searched For
    - Output: The Locations of Where the Word is Found
    """
    try:
        with open(filename, 'r') as file:
            content = file.read()

        locations = []
        start = 0
        while True:
            index = content.find(word, start)
            if index == -1:
                break
            locations.append(index + 1)  # Adjusting the Index to Start at 1
            start = index + 1

        return locations
    except FileNotFoundError:
        print("Warning: The file '{}' Does Not Exist.".format(filename))
        return -1

def dataRecorder(filename, record):
    """
    Creates a CSV File with Given Filename and Appends the Record to the File
    
    - Inputs: The Name of the File to Write the Dictionary To
    - Output: The Modified File With the Dictionary Appended to It 
    
    """

    # Field Names for the CSV File
    fieldnames = ['Name', 'Weight', 'Height']

    # Check if the File Exists
    file_exists = False
    try:
        with open(filename, 'r'):
            file_exists = True
    except FileNotFoundError:
        pass

    # Write the Record to the File
    with open(filename, 'a', newline='') as file:
        writer = csv.DictWriter(file, fieldnames=fieldnames)

        # Write Header Only if the File Doesn't Exist
        if not file_exists:
            writer.writeheader()

        writer.writerow(record)
        
# record = {"Name": "John", "Weight": 180, "Height": 6}
# dataRecorder("data.csv", record)